import wollok.game.*
import niveles.*
import juego.*
import cuadrado.*
import obstaculos.*
import elementos.*
import sonidos.*

program ejecucion{
	juego.iniciar()
	
	var niveles_salteados = 0
	var pantalla_final = new Escenario(numero_imagen = 12)
	var pantalla_maze = new Escenario(numero_imagen = 13)
	
	
	// Lista de niveles para irlos generando en base al primero de la lista.
	
	//nivel_1, nivel_2, nivel_3, nivel_4, nivel_5, nivel_6, nivel_7, nivel_8, nivel_9, nivel_10, nivel_maze
	
	var niveles = [nivel_1, nivel_2, nivel_3, nivel_4, nivel_5, nivel_6, nivel_7, nivel_8, nivel_9, nivel_10, nivel_maze]
	
	
	// Expresion lambda para pasar al siguiente nivel.
	
	var saltar_nivel = { =>
	niveles.get(0).detener_obstaculos()
	niveles.remove(niveles.get(0))
	game.allVisuals().forEach({n =>game.removeVisual(n)})
	
	if (niveles.size() == 1 and (niveles_salteados >= 1 or menu.muertes() > 5)){
		game.addVisual(pantalla_final)
		menu.position(game.at(13, 12))
		game.addVisual(menu)
	}
	else{
		salida.pasar_nivel(niveles.get(0)) 
		cuadrado.llaves_guardadas().clear()
		cuadrado.chocar_obstaculo()
	}
	}
	
	
	// Llamando a los metodos del primer nivel para generar sus visuales e iniciar los eventos onTick de los 
	// Obstaculos.
	
	niveles.get(0).empezar_nivel()
	niveles.get(0).nivel_obstaculos()
	
	
	
	//Acciones del teclado.
	
	
	// Movimiento del cuadrado (Tecla Up/Arriba, Tecla Left/Izquierda, 
	//                          Tecla Down/Abajo, Tecla Right/Derecha).
	 
	keyboard.up().onPressDo{cuadrado.mover_arriba()}
	keyboard.left().onPressDo{cuadrado.mover_izquierda()}
	keyboard.down().onPressDo{cuadrado.mover_abajo()}
	keyboard.right().onPressDo{cuadrado.mover_derecha()}
	
	
	// Tecla Delete/Retroceso para cerrar el juego.
	
	keyboard.del().onPressDo{game.stop()}
	
	
	// Tecla Enter/Entrar para pasar al siguiente nivel en caso de que el mismo se relentize mucho.
	
	keyboard.enter().onPressDo{niveles_salteados += 1
		saltar_nivel.apply()
	}



	// Colisiones
	
	
	game.onCollideDo(cuadrado, {llave => if (llave.identificador() == "Llave"){
	cuadrado.agarrar(llave)
	game.removeVisual(llave)
	}	
	})
	

	game.onCollideDo(cuadrado, {bola => if (bola.identificador() == "Obstaculo"){
		bola.choque(cuadrado.llaves())}})
	
	
	game.onCollideDo(cuadrado, {check => if (check.identificador() == "Checkpoint"){
		cuadrado.cambiar_spawn(check.position())
		if (cuadrado.llaves_guardadas().size() < 1){
			cuadrado.llaves_guardadas().addAll(cuadrado.llaves())
			cuadrado.llaves().clear()}
			}
			}
			)		
	


	game.onCollideDo(salida, {pj => if (pj.identificador() == "Cuadrado" and 
	(cuadrado.llaves().size() == salida.llaves_req() or 
	(cuadrado.llaves().size() + cuadrado.llaves_guardadas().size()) == salida.llaves_req())){
		saltar_nivel.apply()
	}
	}
	)
	
	game.onCollideDo(cuadrado, {egg => if(egg.identificador() == "Easter_egg"){
		game.addVisual(pantalla_maze)
		need_egg.play()
		game.schedule(5000, {game.stop()})
		}
	})
	
	
	/*/Musica del juego.
	
	const snubby = game.sound("temardo.mp3")
	snubby.shouldLoop(true)
	game.schedule(500, {snubby.play()})
	
	*/
	
	//game.onTick(1000, "Contador", {menu.sumar_segundos()})
	
	
	game.start()
	}  
